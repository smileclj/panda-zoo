package com.panda.zoo.common.util;import com.google.common.collect.Lists;import org.apache.commons.collections.MapUtils;import org.apache.commons.httpclient.*;import org.apache.commons.httpclient.methods.GetMethod;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.StringRequestEntity;import org.apache.commons.httpclient.methods.multipart.FilePart;import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;import org.apache.commons.httpclient.methods.multipart.Part;import org.apache.commons.httpclient.methods.multipart.StringPart;import org.apache.commons.httpclient.util.URIUtil;import org.apache.http.protocol.HTTP;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.*;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;public final class HttpClientUtil {    private static final Logger logger = LoggerFactory.getLogger(HttpClientUtil.class);    private static final String MIME_JSON = "application/json";    /**     * 拼接url参数     *     * @param params     * @return     */    public static String joinParams(Map<String, Object> params) {        if (MapUtils.isEmpty(params)) {            return "";        }        StringBuilder sb = new StringBuilder();        for (Map.Entry<String, Object> entry : params.entrySet()) {            sb.append(entry.getKey()).append("=").append(entry.getValue().toString()).append("&");        }        return sb.toString().substring(0, sb.toString().length() - 1);    }    /**     * get请求     *     * @param url     * @param params     * @return     */    public static String get(String url, Map<String, Object> params) {        String result = "";        HttpClient client = new HttpClient();        GetMethod method = new GetMethod(url);        String paramString = null;        try {            paramString = joinParams(params);            method.setQueryString(URIUtil.encodeQuery(paramString));            client.executeMethod(method);            if (method.getStatusCode() == HttpStatus.SC_OK) {                result = method.getResponseBodyAsString();            }        } catch (URIException e) {            logger.error("执行HTTP Get请求时，编码查询字符串“" + paramString + "”发生异常！", e);        } catch (IOException e) {            logger.error("执行HTTP Get请求" + url + "时，发生异常！", e);        } finally {            method.releaseConnection();        }        return result;    }    /**     * post请求     *     * @param url     * @param params     * @return     */    public static String post(String url, Map<String, Object> params) {        String result = "";        HttpClient client = new HttpClient();        PostMethod method = new PostMethod(url);        if (MapUtils.isNotEmpty(params)) {            NameValuePair[] pairs = new NameValuePair[params.size()];            int i = 0;            for (Map.Entry<String, Object> entry : params.entrySet()) {                pairs[i] = new NameValuePair(entry.getKey(), entry.getValue().toString());                i++;            }            method.setRequestBody(pairs);        }        try {            client.executeMethod(method);            if (method.getStatusCode() == HttpStatus.SC_OK) {                result = method.getResponseBodyAsString();            }        } catch (IOException e) {            logger.error("执行HTTP Post请求" + url + "时，发生异常！", e);        } finally {            method.releaseConnection();        }        return result;    }    /**     * 请求体为json的post请求     *     * @param url     * @param entity     * @return     */    public static String postJson(String url, String entity) {        String result = "";        HttpClient client = new HttpClient();        PostMethod method = new PostMethod(url);        method.setRequestHeader(HTTP.CONTENT_TYPE, MIME_JSON);        try {            method.setRequestEntity(new StringRequestEntity(entity, MIME_JSON, "UTF-8"));            client.executeMethod(method);            if (method.getStatusCode() == HttpStatus.SC_OK) {                result = method.getResponseBodyAsString();            }        } catch (IOException e) {            logger.error("执行HTTP Post请求" + url + "时，发生异常！", e);        } finally {            method.releaseConnection();        }        return result;    }    /**     * 文件上传     *     * @param url     * @param params     * @param files     * @return     */    public static String uploadFile(String url, Map<String, String> params, Map<String, File> files) {        PostMethod postMethod = new PostMethod(url);        StringBuilder result = new StringBuilder();        BufferedReader in;        try {            int partLength = params == null ? files.size() : params.size() + files.size();            List<Part> partList = Lists.newArrayListWithCapacity(partLength);            if (MapUtils.isNotEmpty(params)) {                for (Map.Entry<String, String> entry : params.entrySet()) {                    StringPart stringPart = new StringPart(entry.getKey(), entry.getValue());                    stringPart.setCharSet("UTF-8");                    partList.add(stringPart);                }            }            Set<Map.Entry<String, File>> set = files.entrySet();            Iterator<Map.Entry<String, File>> it = set.iterator();            while (it.hasNext()) {                Map.Entry<String, File> entry = it.next();                FilePart filePart = new FilePart(entry.getKey(), entry.getValue());                filePart.setCharSet("UTF-8");                partList.add(filePart);            }            MultipartRequestEntity post = new MultipartRequestEntity(partList.toArray(new Part[partLength]), postMethod.getParams());            postMethod.setRequestEntity(post);            HttpClient client = new HttpClient();            client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);            int status = client.executeMethod(postMethod);            if (status == 200) {                in = new BufferedReader(new InputStreamReader(postMethod.getResponseBodyAsStream()));                String line;                while ((line = in.readLine()) != null) {                    result.append(line);                }            } else {                logger.error("文件上传失败");            }        } catch (IOException e) {            logger.error("文件上传失败", e);        } finally {            postMethod.releaseConnection();        }        return result.toString();    }    /**     * 文件下载     *     * @param url     * @param params     * @param folderPath     * @return     */    public static String downloadFile(String url, Map<String, String> params, String folderPath) {        String filePath = "";        PostMethod postMethod = new PostMethod(url);        BufferedInputStream in = null;        BufferedOutputStream out = null;        try {            int partLength = params.size();            List<Part> partList = Lists.newArrayListWithCapacity(partLength);            if (MapUtils.isNotEmpty(params)) {                for (Map.Entry<String, String> entry : params.entrySet()) {                    StringPart stringPart = new StringPart(entry.getKey(), entry.getValue());                    stringPart.setCharSet("UTF-8");                    partList.add(stringPart);                }            }            MultipartRequestEntity post = new MultipartRequestEntity(partList.toArray(new Part[partLength]), postMethod.getParams());            postMethod.setRequestEntity(post);            HttpClient client = new HttpClient();            client.getHttpConnectionManager().getParams().setConnectionTimeout(5000);            int status = client.executeMethod(postMethod);            if (status == 200) {                String fileName = null;                Header header = postMethod.getResponseHeader("Content-Disposition");                if (header != null) {                    HeaderElement[] elements = header.getElements();                    for (HeaderElement e : elements) {                        NameValuePair pair = e.getParameterByName("fileName");                        if (pair != null) {                            fileName = pair.getValue();                        }                    }                    filePath = folderPath + fileName;                    in = new BufferedInputStream(postMethod.getResponseBodyAsStream());                    out = new BufferedOutputStream(new FileOutputStream(filePath));                    byte[] buff = new byte[1024];                    int b;                    while ((b = in.read(buff)) != -1) {                        out.write(buff, 0, b);                    }                    out.flush();                } else {                    logger.warn("下载文件返回:{}", postMethod.getResponseBodyAsString());                }            } else {                logger.error("文件下载失败");            }        } catch (IOException e) {            logger.error("文件下载失败", e);        } finally {            postMethod.releaseConnection();            if (in != null) {                try {                    in.close();                } catch (IOException e) {                    logger.error("文件下载失败", e);                }            }            if (out != null) {                try {                    out.close();                } catch (IOException e) {                    logger.error("文件下载失败", e);                }            }        }        return filePath;    }}